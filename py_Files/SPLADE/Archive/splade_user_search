import json
import torch
import numpy as np
from transformers import AutoTokenizer, AutoModelForMaskedLM
from scipy.sparse import load_npz
from sklearn.metrics.pairwise import cosine_similarity
import re

# Load SPLADE model and tokenizer
model_name = "naver/splade-cocondenser-ensembledistil"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForMaskedLM.from_pretrained(model_name)

# Normalize text
def normalize_text(text):
    text = text.lower()
    text = ''.join(c for c in text if c.isalnum() or c.isspace())
    text = re.sub(r'\s+', ' ', text).strip()
    return text

# Encode text into sparse vectors using SPLADE
def encode_splade(texts):
    inputs = tokenizer(texts, return_tensors="pt", padding=True, truncation=True)
    with torch.no_grad():
        outputs = model(**inputs)
        sparse_vectors = torch.max(outputs.logits, dim=1).values
    return sparse_vectors.cpu().numpy()

# Search function using cosine similarity
def search(query, index, metadata, top_k=5):
    query_vector = encode_splade([normalize_text(query)])
    similarities = cosine_similarity(query_vector, index).flatten()
    top_indices = similarities.argsort()[-top_k:][::-1]
    return [(metadata[i], similarities[i]) for i in top_indices]

# Load precomputed index and metadata
index_path = "/home/mlt_ml3/IR_Derry_Girls/py_Files/SPLADE/splade_index_relu.npz"
metadata_path = "/home/mlt_ml3/IR_Derry_Girls/py_Files/SPLADE/metadata_relu.json"

index = load_npz(index_path)
with open(metadata_path, 'r') as f:
    metadata = json.load(f)


print("SPLADE IR system ready. Type your query or 'exit' to quit.")
while True:
    query = input("\nSearch: ").strip()
    if query.lower() == "exit":
        break
    results = search(query, index, [line for line in metadata if line.get("normalized_text")])
    for rank, (meta, score) in enumerate(results, start=1):
        print(f"\n{rank}. [Score: {score:.4f}] Season {meta['season']} Episode {meta['episode']}")
        print(f"Scene: {meta['scene']}")
        print(f"{meta['speaker'] or 'NARRATION'}: {meta['clean_text']}")
        if meta['actions']:
            print(f"Actions: {'; '.join(meta['actions'])}")
        print("-" * 50)
